exit
c
state
id_as_sym
state.key?(:"#{id_as_sym}")
c
reduce_fcts
events
Nuago::Reducer.reduce(events, state: Nuago::Reducer.init_state, fcts: reduce_fcts)
state
c
entities
Nuago::EventStore.class_variable_get("@@repository")
Nuago::EventStore.class_variable_get("@@repository"
Nuago::EventStore.all
entities
tweets
c
tweets
c
fct
state
c
events
c
events
c
events
c
events
c
events
c
events
c
id
c
events
c
events
c
events
exit
c
aggregate_type.capitalize
"EventedTwitter::Aggregates::#{aggregate_type}::Reducer".constantize
aggregate_type ="UserFollow"
aggregate_type = _
aggregate_type  _
self.class.name.split('::').last
self.class.name.split('::')
self.class.name
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
command[:command_name]
c
errors
c
errors
exit
c
data.class == ::String
data.class == String
"asa".is_a?(String)
data.class
data.is_a?(String)
false unless data.is_a?(String)
data
c
errorsc
errors
c
!datatype.valid?(value)
c
!datatype.valid?(value)
        end
          errors << [k, "`#{value}` is an invalid #{datatype}"]
if !datatype.valid?(value)
!datatype.valid?(value)
c
exit
!!"hi".match(uuid_regex)
!!data.match(uuid_regex)
data.match(uuid_regex)
uuid_regex = /^[0-9a-fA-F]{8}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{12}$/
data.match(uuid_regex)
uuid_regex = @options[:uuid_regex] || /^[0-9a-fA-F]{8}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{4}\-?[0-9a-fA-F]{12}$/
data = data.deep_fetch('tweet.user_id')
data = (data.deep_fetch('tweet.user_id')
Nuago::Schema::UUID.new.valid?(data.deep_fetch('tweet.user_id').gsub('-',''))
Nuago::Schema::UUID.new.valid?(data.deep_fetch('tweet.user_id').gsub('-','')
Nuago::Schema::UUID.new.valid?(data.deep_fetch('tweet.user_id'))
data.deep_fetch('tweet.user_id')
errors
c
datatype
k
c
schema
data
datatype
k
c
self
path
value
c
    value = self[curr_key]
curr_key = path[0].to_sym
value
self
path
value
c
grouped_events
c
events
c
events.first[:metadata]
events
c
Nuago::EventStore.instance_variable_get("@@repository")
Nuago::EventStore.class_variable_get("@@repository")
Nuago::EventStore.repository
Nuago::EventStore
events
